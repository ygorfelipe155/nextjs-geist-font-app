#!/usr/bin/env python3
"""
Script de Inicializa√ß√£o Segura do Sistema de Gest√£o
Previne erros 502 Bad Gateway e garante inicializa√ß√£o est√°vel
"""

import os
import sys
import time
import subprocess
import logging
from pathlib import Path

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('startup.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def check_python_version():
    """Verifica vers√£o do Python"""
    if sys.version_info < (3, 8):
        logger.error("‚ùå Python 3.8+ √© necess√°rio")
        return False
    
    logger.info(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")
    return True

def install_dependencies():
    """Instala depend√™ncias necess√°rias"""
    try:
        logger.info("üì¶ Instalando depend√™ncias...")
        
        # Verificar se requirements.txt existe
        req_file = Path(__file__).parent / "requirements.txt"
        if not req_file.exists():
            logger.error("‚ùå Arquivo requirements.txt n√£o encontrado")
            return False
        
        # Instalar depend√™ncias
        cmd = [sys.executable, "-m", "pip", "install", "-r", str(req_file)]
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode != 0:
            logger.error(f"‚ùå Erro ao instalar depend√™ncias: {result.stderr}")
            return False
        
        logger.info("‚úÖ Depend√™ncias instaladas com sucesso")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro na instala√ß√£o: {e}")
        return False

def run_system_check():
    """Executa verifica√ß√£o do sistema"""
    try:
        logger.info("üîç Executando verifica√ß√£o do sistema...")
        
        # Executar check_memory.py
        cmd = [sys.executable, "check_memory.py"]
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=Path(__file__).parent)
        
        if result.returncode != 0:
            logger.error("‚ùå Sistema n√£o atende aos requisitos m√≠nimos")
            logger.error(result.stdout)
            return False
        
        logger.info("‚úÖ Sistema aprovado na verifica√ß√£o")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro na verifica√ß√£o: {e}")
        return False

def start_application():
    """Inicia aplica√ß√£o usando safe_launcher"""
    try:
        logger.info("üöÄ Iniciando aplica√ß√£o...")
        
        # Usar safe_launcher para iniciar
        cmd = [sys.executable, "safe_launcher.py"]
        
        # Executar em modo interativo
        process = subprocess.Popen(
            cmd,
            cwd=Path(__file__).parent,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            bufsize=1
        )
        
        # Monitorar sa√≠da em tempo real
        while True:
            output = process.stdout.readline()
            if output == '' and process.poll() is not None:
                break
            if output:
                print(output.strip())
        
        return_code = process.poll()
        
        if return_code == 0:
            logger.info("‚úÖ Aplica√ß√£o encerrada normalmente")
        else:
            logger.error(f"‚ùå Aplica√ß√£o encerrada com erro (c√≥digo: {return_code})")
        
        return return_code == 0
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  Interrompido pelo usu√°rio")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar aplica√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal do startup"""
    logger.info("=" * 60)
    logger.info("üöÄ SISTEMA DE GEST√ÉO - INICIALIZA√á√ÉO SEGURA")
    logger.info("=" * 60)
    
    try:
        # 1. Verificar Python
        if not check_python_version():
            return 1
        
        # 2. Instalar depend√™ncias
        if not install_dependencies():
            return 1
        
        # 3. Verificar sistema
        if not run_system_check():
            logger.warning("‚ö†Ô∏è  Sistema n√£o passou na verifica√ß√£o, mas continuando...")
        
        # 4. Iniciar aplica√ß√£o
        if not start_application():
            return 1
        
        logger.info("üéâ Startup conclu√≠do com sucesso!")
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico no startup: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
